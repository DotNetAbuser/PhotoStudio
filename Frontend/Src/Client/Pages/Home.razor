@page "/"
@using Infrastructure.Constants

<PageTitle>Главная</PageTitle>

<!-- main -->
<section class = "section-three" id="gallery">
    <div class = "container">
        <div class="gallery">
            @foreach (var item in _galleryList.Where(x => x.Id < 7))
            {
                <a href="@(ApplicationConstants.BackendAddress + item.PicturePath)">
                    <div class="single-img">
                        <img src="@(ApplicationConstants.BackendAddress + item.PicturePath)" alt="gallery image">
                        <div class="single-img-content">
                            <h3>@item.Name</h3>
                        </div>
                    </div>
                </a>
            }
        </div>
    </div>
</section>
<!-- end of main -->

<!-- main -->
<section class="section-five" id="contact">
    <div class="container">
        <div class="contact-top">
            <h3>Связаться с нами</h3>
        </div>

        <div class="contact-middle">
            <div>
                <span class="contact-icon">
                    <i class="fas fa-map-signs"></i>
                </span>
                <span>Адресс</span>
                <p>г.Казань, ул.Театральная, д.1</p>
            </div>

            <div>
                <span class="contact-icon">
                    <i class="fas fa-phone"></i>
                </span>
                <span>Контактный номер</span>
                <p>8 (843) 123 456 789</p>
            </div>

            <div>
                <span class="contact-icon">
                    <i class="fas fa-paper-plane"></i>
                </span>
                <span>Эл. почта</span>
                <p>photostudio@gmail.com</p>
            </div>
        </div>
    </div>
</section>
<!-- end of main -->

@code{
    [Inject] IGalleryManager GalleryManager { get; set; } = default!;
    [Inject] IJSRuntime JsRuntime { get; set; } = default!;

    
    private bool _isBusy;
    private IEnumerable<GalleryResponse> _galleryList = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _isBusy = true;

            var result = await GalleryManager.GetAllAsync();
            if (!result.Succeeded)
            {
                foreach (var message in result.Messages)
                    await JsRuntime.InvokeVoidAsync("alert", message);
                return;
            }
            _galleryList = result.Data;
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            _isBusy = false;
        }
    }

}

  